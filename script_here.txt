// Copyright 2024, Benhlal Yazid, All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



function main() {
  // Replace with your the campaigns names and the target budgets
  var campaignBudgets = {
    "Campaign 1": 300,
    "Campaign 2": 500,
    "Campaign 3": 700
    // Add more campaigns here if needed
  };

  // Iterate over each campaign and adjust the budget
  for (var campaignName in campaignBudgets) {
    var targetBudget = campaignBudgets[campaignName];
    var campaign = getCampaignByName(campaignName);
    
    if (campaign) {
      increaseBudget(campaign, targetBudget);
    } else {
      Logger.log("No campaign found with the name: " + campaignName);
    }
  }
}

// This function fetches the campaign by name
function getCampaignByName(campaignName) {
  var campaignIterator = AdsApp.campaigns()
    .withCondition("Name = '" + campaignName + "'")
    .get();

  if (campaignIterator.hasNext()) {
    return campaignIterator.next();
  } else {
    return null;
  }
}

// This function increases the campaign budget by 15% every 4 days, up to the target budget
function increaseBudget(campaign, targetBudget) {
  var currentBudget = campaign.getBudget().getAmount();
  
  if (currentBudget >= targetBudget) {
    Logger.log("Current budget (" + currentBudget + ") is already at or above the target budget (" + targetBudget + "). No changes made.");
    return; // Exit if the current budget is already at or above the target budget
  }

  var newBudget = currentBudget * 1.15; // Add 15% to the current budget
  
  // Ensure the new budget doesn't exceed the target budget
  if (newBudget > targetBudget) {
    newBudget = targetBudget;
  }

  // Calculate the number of days since the last increase
  var lastIncrease = getLastIncreaseDate(campaign);
  var daysSinceLastIncrease = (new Date() - lastIncrease) / (1000 * 60 * 60 * 24);

  // Only increase the budget if 4 or more days have passed
  if (daysSinceLastIncrease >= 4) {
    Logger.log("Increasing budget for campaign '" + campaign.getName() + "'. New budget: " + newBudget);
    campaign.getBudget().setAmount(newBudget);
    storeLastIncreaseDate(campaign);
    logBudgetIncrease(campaign.getName(), newBudget);
  } else {
    Logger.log("Less than 4 days since the last budget increase. Skipping update.");
  }
}

// This function stores the last increase date using labels
function storeLastIncreaseDate(campaign) {
  var labelName = "Last Increase Date " + new Date().toISOString().split('T')[0]; // Include the date in the label name

  if (!AdsApp.labels().withCondition("Name = '" + labelName + "'").get().hasNext()) {
    AdsApp.createLabel(labelName);
  }

  campaign.applyLabel(labelName);
}

// This function gets the last increase date from the labels
function getLastIncreaseDate(campaign) {
  var labelIterator = campaign.labels()
    .withCondition("Name CONTAINS 'Last Increase Date'")
    .get();

  if (labelIterator.hasNext()) {
    var label = labelIterator.next();
    var labelDate = label.getName().split('Last Increase Date ')[1]; // Extract the date from the label name
    return new Date(labelDate); // Convert to Date object
  } else {
    return new Date(0); // If no label exists, return the earliest possible date
  }
}

// This function logs the budget increase to a Google Sheets file
function logBudgetIncrease(campaignName, newBudget) {
  var spreadsheetUrl = "YOUR_SPREADSHEET_URL"; // Replace with your Google Sheets URL
  var sheetName = "Budget Increases"; // Replace with your desired sheet name

  var spreadsheet = SpreadsheetApp.openByUrl(spreadsheetUrl);
  var sheet = spreadsheet.getSheetByName(sheetName);

  if (!sheet) {
    sheet = spreadsheet.insertSheet(sheetName);
    sheet.appendRow(["Date", "Campaign Name", "New Budget"]);
  }

  var currentDate = new Date();
  sheet.appendRow([currentDate, campaignName, newBudget]);
}
