// Copyright 2024, Benhlal Yazid, All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



function main() {
  // Define the campaigns and their target budgets
  var campaignBudgets = {
    "Campaign 1": 300,
    "Campaign 2": 500,
    "Campaign 3": 700
    // Add more campaigns here if necessary
  };

  // Iterate over all campaigns in the dictionary
  for (var campaignName in campaignBudgets) {
    var targetBudget = campaignBudgets[campaignName];
    var campaign = getCampaignByName(campaignName);

    if (campaign) {
      increaseBudget(campaign, targetBudget);
    } else {
      Logger.log("No campaign found with the name: " + campaignName);
    }
  }
}

// Fetches the campaign by name
function getCampaignByName(campaignName) {
  var campaignIterator = AdsApp.campaigns()
    .withCondition("Name = '" + campaignName + "'")
    .get();

  if (campaignIterator.hasNext()) {
    return campaignIterator.next();
  } else {
    return null;
  }
}

// Increases the campaign budget by 15% every 4 days, up to the target budget
function increaseBudget(campaign, targetBudget) {
  var currentBudget = campaign.getBudget().getAmount();
  
  if (currentBudget >= targetBudget) {
    Logger.log("Current budget (" + currentBudget + ") is already at or above the target budget (" + targetBudget + "). No changes made.");
    return; // Exit if the current budget is already at or above the target budget
  }

  var newBudget = currentBudget * 1.15; // Add 15% to the current budget
  
  // Make sure the new budget doesn't exceed the target budget
  if (newBudget > targetBudget) {
    newBudget = targetBudget;
  }

  // Calculate the days since last increase
  var lastIncrease = getLastIncreaseDate(campaign);
  var daysSinceLastIncrease = (new Date() - lastIncrease) / (1000 * 60 * 60 * 24);

  // Only increase the budget if 4 or more days have passed
  if (daysSinceLastIncrease >= 4) {
    Logger.log("Increasing budget for campaign '" + campaign.getName() + "'. New budget: " + newBudget);
    campaign.getBudget().setAmount(newBudget);
    storeLastIncreaseDate(campaign);
    
    // Log to Google Sheet
    logToGoogleSheet(campaign.getName(), currentBudget, newBudget);
  } else {
    Logger.log("Less than 4 days since the last budget increase. Skipping update.");
  }
}

// Stores the last increase date using labels
function storeLastIncreaseDate(campaign) {
  var labelName = "Last Increase Date " + new Date().toISOString().split('T')[0]; // Append today's date to the label name

  // Apply the label with the current date as part of the name
  if (!AdsApp.labels().withCondition("Name = '" + labelName + "'").get().hasNext()) {
    AdsApp.createLabel(labelName);
  }
  campaign.applyLabel(labelName);
}

// Retrieves the last increase date from the labels
function getLastIncreaseDate(campaign) {
  var labelIterator = campaign.labels().get();
  var latestDate = new Date(0); // Set to the earliest possible date

  while (labelIterator.hasNext()) {
    var label = labelIterator.next();
    if (label.getName().startsWith("Last Increase Date ")) {
      var labelDate = new Date(label.getName().replace("Last Increase Date ", ""));
      if (labelDate > latestDate) {
        latestDate = labelDate;
      }
    }
  }
  return latestDate;
}

// Logs the budget changes to a Google Sheet and adds a header if it doesn't exist
function logToGoogleSheet(campaignName, oldBudget, newBudget) {
  var sheetUrl = "YOUR_SHEET_URL_HERE"; // Replace with your Google Sheets URL
  var spreadsheet = SpreadsheetApp.openByUrl(sheetUrl);
  var sheet = spreadsheet.getActiveSheet();
  
  // Check if the sheet is empty, if so, add a header row
  if (sheet.getLastRow() == 0) {
    sheet.appendRow(["Date", "Campaign Name", "Old Budget", "New Budget"]); // Add the header row
  }
  
  // Get today's date in a readable format (YYYY-MM-DD)
  var today = new Date().toISOString().split('T')[0];
  
  // Append a new row to the sheet with the campaign name, old and new budget, and the date
  sheet.appendRow([today, campaignName, oldBudget, newBudget]);
}
